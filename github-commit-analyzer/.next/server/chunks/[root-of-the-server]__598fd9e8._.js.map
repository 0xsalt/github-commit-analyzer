{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///workspace/github-commit-analyzer/src/lib/github/client.ts"],"sourcesContent":["export interface GitHubRepository {\n  id: number;\n  name: string;\n  full_name: string;\n  owner: {\n    login: string;\n    id: number;\n    type: string;\n  };\n  private: boolean;\n  html_url: string;\n  description: string | null;\n  fork: boolean;\n  default_branch: string;\n  parent?: {\n    id: number;\n    full_name: string;\n    html_url: string;\n    owner: {\n      login: string;\n    };\n  };\n  source?: {\n    id: number;\n    full_name: string;\n    html_url: string;\n  };\n}\n\nexport interface GitHubCommit {\n  sha: string;\n  node_id: string;\n  commit: {\n    author: {\n      name: string;\n      email: string;\n      date: string;\n    };\n    committer: {\n      name: string;\n      email: string;\n      date: string;\n    };\n    message: string;\n    tree: {\n      sha: string;\n      url: string;\n    };\n  };\n  url: string;\n  html_url: string;\n  author: {\n    login: string;\n    id: number;\n  } | null;\n  committer: {\n    login: string;\n    id: number;\n  } | null;\n  parents: Array<{\n    sha: string;\n    url: string;\n    html_url: string;\n  }>;\n  stats?: {\n    total: number;\n    additions: number;\n    deletions: number;\n  };\n  files?: Array<{\n    sha: string;\n    filename: string;\n    status: string;\n    additions: number;\n    deletions: number;\n    changes: number;\n    blob_url: string;\n    raw_url: string;\n    contents_url: string;\n    patch?: string;\n  }>;\n}\n\nexport interface GitHubComparison {\n  url: string;\n  html_url: string;\n  permalink_url: string;\n  diff_url: string;\n  patch_url: string;\n  base_commit: GitHubCommit;\n  merge_base_commit: GitHubCommit;\n  status: \"ahead\" | \"behind\" | \"identical\" | \"diverged\";\n  ahead_by: number;\n  behind_by: number;\n  total_commits: number;\n  commits: GitHubCommit[];\n  files: Array<{\n    sha: string;\n    filename: string;\n    status: string;\n    additions: number;\n    deletions: number;\n    changes: number;\n    blob_url: string;\n    raw_url: string;\n    contents_url: string;\n    patch?: string;\n  }>;\n}\n\nexport class GitHubClient {\n  private baseUrl = \"https://api.github.com\";\n  private token?: string;\n\n  constructor(token?: string) {\n    this.token = token;\n  }\n\n  private async makeRequest<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    const url = `${this.baseUrl}${endpoint}`;\n    const headers: Record<string, string> = {\n      \"Accept\": \"application/vnd.github+json\",\n      \"X-GitHub-Api-Version\": \"2022-11-28\",\n      \"User-Agent\": \"GitHub-Commit-Analyzer/1.0\",\n      ...options.headers as Record<string, string>,\n    };\n\n    if (this.token) {\n      headers[\"Authorization\"] = `Bearer ${this.token}`;\n    }\n\n    const response = await fetch(url, {\n      ...options,\n      headers,\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(\n        errorData.message || \n        `GitHub API error: ${response.status} ${response.statusText}`\n      );\n    }\n\n    return response.json();\n  }\n\n  async getRepository(owner: string, repo: string): Promise<GitHubRepository> {\n    return this.makeRequest<GitHubRepository>(`/repos/${owner}/${repo}`);\n  }\n\n  async getCommits(\n    owner: string, \n    repo: string, \n    options: {\n      sha?: string;\n      since?: string;\n      until?: string;\n      per_page?: number;\n      page?: number;\n      path?: string;\n      author?: string;\n    } = {}\n  ): Promise<GitHubCommit[]> {\n    const params = new URLSearchParams();\n    \n    Object.entries(options).forEach(([key, value]) => {\n      if (value !== undefined) {\n        params.append(key, value.toString());\n      }\n    });\n\n    const queryString = params.toString();\n    const endpoint = `/repos/${owner}/${repo}/commits${queryString ? `?${queryString}` : ''}`;\n    \n    return this.makeRequest<GitHubCommit[]>(endpoint);\n  }\n\n  async getCommit(owner: string, repo: string, ref: string): Promise<GitHubCommit> {\n    return this.makeRequest<GitHubCommit>(`/repos/${owner}/${repo}/commits/${ref}`);\n  }\n\n  async compareCommits(\n    owner: string, \n    repo: string, \n    base: string, \n    head: string\n  ): Promise<GitHubComparison> {\n    return this.makeRequest<GitHubComparison>(`/repos/${owner}/${repo}/compare/${base}...${head}`);\n  }\n\n  async compareRepositories(\n    baseOwner: string,\n    baseRepo: string,\n    baseBranch: string,\n    headOwner: string,\n    headRepo: string,\n    headBranch: string\n  ): Promise<GitHubComparison> {\n    // Use the base repository as the context for comparison\n    const base = `${baseOwner}:${baseBranch}`;\n    const head = `${headOwner}:${headBranch}`;\n    \n    return this.makeRequest<GitHubComparison>(`/repos/${baseOwner}/${baseRepo}/compare/${base}...${head}`);\n  }\n\n  async getRateLimit(): Promise<{\n    limit: number;\n    remaining: number;\n    reset: number;\n    used: number;\n  }> {\n    const response = await this.makeRequest<{\n      rate: {\n        limit: number;\n        remaining: number;\n        reset: number;\n        used: number;\n      };\n    }>('/rate_limit');\n    \n    return response.rate;\n  }\n}\n\nexport function parseRepositoryUrl(url: string): { owner: string; repo: string } {\n  // Remove trailing .git if present\n  const cleanUrl = url.replace(/\\.git$/, '');\n  \n  // Handle different GitHub URL formats\n  const patterns = [\n    /github\\.com\\/([^\\/]+)\\/([^\\/]+)(?:\\/.*)?$/,  // https://github.com/owner/repo or https://github.com/owner/repo/...\n    /github\\.com:([^\\/]+)\\/([^\\/]+)(?:\\.git)?$/,  // git@github.com:owner/repo.git\n  ];\n\n  for (const pattern of patterns) {\n    const match = cleanUrl.match(pattern);\n    if (match) {\n      return {\n        owner: match[1],\n        repo: match[2],\n      };\n    }\n  }\n\n  throw new Error(`Invalid GitHub repository URL: ${url}`);\n}\n\nexport function validateRepositoryUrl(url: string): boolean {\n  try {\n    parseRepositoryUrl(url);\n    return true;\n  } catch {\n    return false;\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///workspace/github-commit-analyzer/src/lib/ai/summarizer.ts"],"sourcesContent":["import type { GitHubCommit } from '../github/client';\n\nexport interface CommitAnalysis {\n  sha: string;\n  message: string;\n  author: {\n    name: string;\n    email: string;\n    username?: string;\n  };\n  date: string;\n  stats: {\n    additions: number;\n    deletions: number;\n    total: number;\n  };\n  files_changed: Array<{\n    filename: string;\n    status: string;\n    additions: number;\n    deletions: number;\n  }>;\n  ai_summary: string;\n  html_url: string;\n}\n\nexport interface CommitSummary {\n  overall_purpose: string;\n  key_changes: string[];\n  categories: {\n    bug_fixes: number;\n    features: number;\n    refactoring: number;\n    documentation: number;\n    testing: number;\n    other: number;\n  };\n  total_changes: {\n    files_modified: number;\n    lines_added: number;\n    lines_deleted: number;\n  };\n  time_period: {\n    first_commit_date: string;\n    last_commit_date: string;\n  };\n}\n\nexport interface ForkSummary {\n  sync_status: string;\n  recommendation: string;\n  key_differences: string[];\n  upstream_highlights: string[];\n  fork_unique_features: string[];\n}\n\nexport class CommitSummarizer {\n  async analyzeCommit(commit: GitHubCommit): Promise<string> {\n    // For now, we'll create a rule-based summary\n    // This can be replaced with actual AI/LLM integration later\n    const message = commit.commit.message.toLowerCase();\n    const files = commit.files || [];\n    const stats = commit.stats || { additions: 0, deletions: 0, total: 0 };\n\n    // Categorize the commit\n    let category = \"other\";\n    let summary = \"\";\n\n    if (message.includes(\"fix\") || message.includes(\"bug\") || message.includes(\"error\")) {\n      category = \"bug_fixes\";\n      summary = this.generateBugFixSummary(commit);\n    } else if (message.includes(\"feat\") || message.includes(\"add\") || message.includes(\"new\")) {\n      category = \"features\";\n      summary = this.generateFeatureSummary(commit);\n    } else if (message.includes(\"refactor\") || message.includes(\"cleanup\") || message.includes(\"reorganize\")) {\n      category = \"refactoring\";\n      summary = this.generateRefactoringSummary(commit);\n    } else if (message.includes(\"doc\") || message.includes(\"readme\") || message.includes(\"comment\")) {\n      category = \"documentation\";\n      summary = this.generateDocumentationSummary(commit);\n    } else if (message.includes(\"test\") || message.includes(\"spec\")) {\n      category = \"testing\";\n      summary = this.generateTestingSummary(commit);\n    } else {\n      summary = this.generateGenericSummary(commit);\n    }\n\n    return summary;\n  }\n\n  private generateBugFixSummary(commit: GitHubCommit): string {\n    const files = commit.files || [];\n    const stats = commit.stats || { additions: 0, deletions: 0, total: 0 };\n    \n    const mainFiles = files.slice(0, 3).map(f => f.filename);\n    const fileCount = files.length;\n    \n    let summary = \"Bug fix addressing \";\n    \n    if (mainFiles.length > 0) {\n      if (mainFiles.some(f => f.includes('.test.') || f.includes('.spec.'))) {\n        summary += \"test-related issues\";\n      } else if (mainFiles.some(f => f.includes('api') || f.includes('service'))) {\n        summary += \"API or service functionality\";\n      } else if (mainFiles.some(f => f.includes('component') || f.includes('ui'))) {\n        summary += \"UI component behavior\";\n      } else {\n        summary += \"core functionality\";\n      }\n    } else {\n      summary += \"system issues\";\n    }\n    \n    if (stats.deletions > stats.additions) {\n      summary += \" by removing problematic code\";\n    } else if (stats.additions > stats.deletions * 2) {\n      summary += \" with additional error handling and validation\";\n    } else {\n      summary += \" through code corrections\";\n    }\n    \n    if (fileCount > 5) {\n      summary += ` across ${fileCount} files`;\n    }\n    \n    return summary + \".\";\n  }\n\n  private generateFeatureSummary(commit: GitHubCommit): string {\n    const files = commit.files || [];\n    const stats = commit.stats || { additions: 0, deletions: 0, total: 0 };\n    \n    const mainFiles = files.slice(0, 3).map(f => f.filename);\n    \n    let summary = \"New feature implementation \";\n    \n    if (mainFiles.some(f => f.includes('component') || f.includes('ui'))) {\n      summary += \"adding UI components and user interface elements\";\n    } else if (mainFiles.some(f => f.includes('api') || f.includes('route'))) {\n      summary += \"introducing new API endpoints and backend functionality\";\n    } else if (mainFiles.some(f => f.includes('service') || f.includes('util'))) {\n      summary += \"adding utility functions and service integrations\";\n    } else if (mainFiles.some(f => f.includes('config') || f.includes('env'))) {\n      summary += \"introducing configuration and environment setup\";\n    } else {\n      summary += \"expanding application capabilities\";\n    }\n    \n    if (stats.additions > 100) {\n      summary += \" with extensive code additions\";\n    } else if (stats.additions > 50) {\n      summary += \" with moderate code expansion\";\n    }\n    \n    return summary + \".\";\n  }\n\n  private generateRefactoringSummary(commit: GitHubCommit): string {\n    const files = commit.files || [];\n    const stats = commit.stats || { additions: 0, deletions: 0, total: 0 };\n    \n    let summary = \"Code refactoring \";\n    \n    if (stats.deletions > stats.additions) {\n      summary += \"simplifying and cleaning up existing code\";\n    } else if (Math.abs(stats.additions - stats.deletions) < 20) {\n      summary += \"restructuring code for better organization\";\n    } else {\n      summary += \"improving code quality and maintainability\";\n    }\n    \n    if (files.length > 10) {\n      summary += \" across multiple modules\";\n    } else if (files.length > 5) {\n      summary += \" affecting several files\";\n    }\n    \n    return summary + \".\";\n  }\n\n  private generateDocumentationSummary(commit: GitHubCommit): string {\n    const files = commit.files || [];\n    \n    let summary = \"Documentation update \";\n    \n    if (files.some(f => f.filename.toLowerCase().includes('readme'))) {\n      summary += \"improving project README and setup instructions\";\n    } else if (files.some(f => f.filename.includes('.md'))) {\n      summary += \"enhancing project documentation and guides\";\n    } else {\n      summary += \"adding code comments and inline documentation\";\n    }\n    \n    return summary + \".\";\n  }\n\n  private generateTestingSummary(commit: GitHubCommit): string {\n    const files = commit.files || [];\n    const stats = commit.stats || { additions: 0, deletions: 0, total: 0 };\n    \n    let summary = \"Testing improvements \";\n    \n    if (stats.additions > stats.deletions * 2) {\n      summary += \"adding comprehensive test coverage\";\n    } else if (stats.deletions > stats.additions) {\n      summary += \"removing outdated tests and cleaning up test suite\";\n    } else {\n      summary += \"updating and enhancing existing tests\";\n    }\n    \n    const testTypes = [];\n    if (files.some(f => f.filename.includes('unit'))) testTypes.push(\"unit tests\");\n    if (files.some(f => f.filename.includes('integration'))) testTypes.push(\"integration tests\");\n    if (files.some(f => f.filename.includes('e2e'))) testTypes.push(\"end-to-end tests\");\n    \n    if (testTypes.length > 0) {\n      summary += ` for ${testTypes.join(\" and \")}`;\n    }\n    \n    return summary + \".\";\n  }\n\n  private generateGenericSummary(commit: GitHubCommit): string {\n    const files = commit.files || [];\n    const stats = commit.stats || { additions: 0, deletions: 0, total: 0 };\n    const message = commit.commit.message;\n    \n    let summary = \"Code changes \";\n    \n    if (stats.additions > stats.deletions * 3) {\n      summary += \"introducing new functionality\";\n    } else if (stats.deletions > stats.additions * 2) {\n      summary += \"removing and cleaning up code\";\n    } else {\n      summary += \"modifying existing functionality\";\n    }\n    \n    // Try to extract meaningful information from commit message\n    const firstLine = message.split('\\n')[0];\n    if (firstLine.length > 10 && firstLine.length < 100) {\n      summary += ` - ${firstLine.toLowerCase()}`;\n    }\n    \n    return summary + \".\";\n  }\n\n  async generateCommitSummary(commits: GitHubCommit[]): Promise<CommitSummary> {\n    if (commits.length === 0) {\n      throw new Error(\"No commits to analyze\");\n    }\n\n    // Analyze each commit and categorize\n    const categories = {\n      bug_fixes: 0,\n      features: 0,\n      refactoring: 0,\n      documentation: 0,\n      testing: 0,\n      other: 0,\n    };\n\n    const keyChanges: string[] = [];\n    let totalFilesModified = 0;\n    let totalLinesAdded = 0;\n    let totalLinesDeleted = 0;\n\n    for (const commit of commits) {\n      const message = commit.commit.message.toLowerCase();\n      const stats = commit.stats || { additions: 0, deletions: 0, total: 0 };\n      const files = commit.files || [];\n\n      totalFilesModified += files.length;\n      totalLinesAdded += stats.additions;\n      totalLinesDeleted += stats.deletions;\n\n      // Categorize commit\n      if (message.includes(\"fix\") || message.includes(\"bug\") || message.includes(\"error\")) {\n        categories.bug_fixes++;\n      } else if (message.includes(\"feat\") || message.includes(\"add\") || message.includes(\"new\")) {\n        categories.features++;\n      } else if (message.includes(\"refactor\") || message.includes(\"cleanup\") || message.includes(\"reorganize\")) {\n        categories.refactoring++;\n      } else if (message.includes(\"doc\") || message.includes(\"readme\") || message.includes(\"comment\")) {\n        categories.documentation++;\n      } else if (message.includes(\"test\") || message.includes(\"spec\")) {\n        categories.testing++;\n      } else {\n        categories.other++;\n      }\n\n      // Extract key changes from significant commits\n      if (stats.total > 50 || files.length > 5) {\n        const firstLine = commit.commit.message.split('\\n')[0];\n        if (firstLine.length > 10 && firstLine.length < 150) {\n          keyChanges.push(firstLine);\n        }\n      }\n    }\n\n    // Generate overall purpose\n    let overallPurpose = \"Recent development activity focused on \";\n    const maxCategory = Object.entries(categories).reduce((a, b) => \n      categories[a[0] as keyof typeof categories] > categories[b[0] as keyof typeof categories] ? a : b\n    );\n\n    switch (maxCategory[0]) {\n      case \"bug_fixes\":\n        overallPurpose += \"fixing bugs and resolving issues\";\n        break;\n      case \"features\":\n        overallPurpose += \"implementing new features and functionality\";\n        break;\n      case \"refactoring\":\n        overallPurpose += \"code refactoring and organizational improvements\";\n        break;\n      case \"documentation\":\n        overallPurpose += \"documentation updates and improvements\";\n        break;\n      case \"testing\":\n        overallPurpose += \"testing enhancements and quality assurance\";\n        break;\n      default:\n        overallPurpose += \"general code maintenance and improvements\";\n    }\n\n    if (commits.length > 20) {\n      overallPurpose += \" across a large number of commits\";\n    } else if (commits.length > 10) {\n      overallPurpose += \" with consistent development progress\";\n    }\n\n    overallPurpose += \".\";\n\n    const sortedDates = commits\n      .map(c => c.commit.author.date)\n      .sort((a, b) => new Date(a).getTime() - new Date(b).getTime());\n\n    return {\n      overall_purpose: overallPurpose,\n      key_changes: keyChanges.slice(0, 10), // Limit to top 10 key changes\n      categories,\n      total_changes: {\n        files_modified: totalFilesModified,\n        lines_added: totalLinesAdded,\n        lines_deleted: totalLinesDeleted,\n      },\n      time_period: {\n        first_commit_date: sortedDates[0],\n        last_commit_date: sortedDates[sortedDates.length - 1],\n      },\n    };\n  }\n\n  async generateForkSummary(\n    comparison: any,\n    aheadCommits: GitHubCommit[],\n    behindCommits: GitHubCommit[]\n  ): Promise<ForkSummary> {\n    const { status, ahead_by, behind_by } = comparison;\n\n    // Generate sync status\n    let syncStatus = \"\";\n    switch (status) {\n      case \"identical\":\n        syncStatus = \"Fork is perfectly synchronized with upstream repository\";\n        break;\n      case \"ahead\":\n        syncStatus = `Fork is ${ahead_by} commit${ahead_by !== 1 ? 's' : ''} ahead of upstream`;\n        break;\n      case \"behind\":\n        syncStatus = `Fork is ${behind_by} commit${behind_by !== 1 ? 's' : ''} behind upstream`;\n        break;\n      case \"diverged\":\n        syncStatus = `Fork has diverged with ${ahead_by} unique commits and missing ${behind_by} upstream commits`;\n        break;\n      default:\n        syncStatus = \"Unable to determine sync status\";\n    }\n\n    // Generate recommendation\n    let recommendation = \"\";\n    if (status === \"identical\") {\n      recommendation = \"Fork is up to date. No action needed.\";\n    } else if (status === \"ahead\" && behind_by === 0) {\n      recommendation = \"Fork contains new changes that could be contributed back to upstream via pull request.\";\n    } else if (status === \"behind\" && ahead_by === 0) {\n      recommendation = \"Consider pulling latest changes from upstream to stay current.\";\n    } else if (status === \"diverged\") {\n      recommendation = \"Fork has diverged significantly. Consider rebasing or merging upstream changes, and evaluate which fork changes should be contributed back.\";\n    }\n\n    // Analyze key differences\n    const keyDifferences: string[] = [];\n    const upstreamHighlights: string[] = [];\n    const forkUniqueFeatures: string[] = [];\n\n    // Analyze behind commits (missing from fork)\n    behindCommits.slice(0, 5).forEach(commit => {\n      const message = commit.commit.message.split('\\n')[0];\n      upstreamHighlights.push(message);\n    });\n\n    // Analyze ahead commits (unique to fork)\n    aheadCommits.slice(0, 5).forEach(commit => {\n      const message = commit.commit.message.split('\\n')[0];\n      forkUniqueFeatures.push(message);\n    });\n\n    // Generate general differences\n    if (ahead_by > 0 && behind_by > 0) {\n      keyDifferences.push(`Fork has ${ahead_by} unique commits and is missing ${behind_by} upstream commits`);\n    }\n    if (ahead_by > 10) {\n      keyDifferences.push(\"Fork contains significant unique development work\");\n    }\n    if (behind_by > 10) {\n      keyDifferences.push(\"Fork is missing substantial upstream improvements\");\n    }\n\n    return {\n      sync_status: syncStatus,\n      recommendation,\n      key_differences: keyDifferences,\n      upstream_highlights: upstreamHighlights,\n      fork_unique_features: forkUniqueFeatures,\n    };\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 500, "column": 0}, "map": {"version":3,"sources":["file:///workspace/github-commit-analyzer/src/app/api/commits/analyze/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { GitHubClient, parseRepositoryUrl } from '@/lib/github/client';\nimport { CommitSummarizer } from '@/lib/ai/summarizer';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { repositoryUrl, commitCount, branch, githubToken } = body;\n\n    if (!repositoryUrl) {\n      return NextResponse.json(\n        { error: \"Repository URL is required\" },\n        { status: 400 }\n      );\n    }\n\n    if (!commitCount || commitCount < 1 || commitCount > 100) {\n      return NextResponse.json(\n        { error: \"Commit count must be between 1 and 100\" },\n        { status: 400 }\n      );\n    }\n\n    // Parse the repository URL\n    let owner: string, repo: string;\n    try {\n      ({ owner, repo } = parseRepositoryUrl(repositoryUrl));\n    } catch (error) {\n      return NextResponse.json(\n        { error: \"Invalid GitHub repository URL format\" },\n        { status: 400 }\n      );\n    }\n\n    // Initialize GitHub client and AI summarizer\n    const github = new GitHubClient(githubToken);\n    const summarizer = new CommitSummarizer();\n\n    try {\n      // Get repository information\n      const repository = await github.getRepository(owner, repo);\n      const targetBranch = branch || repository.default_branch;\n\n      // Fetch commits\n      const commits = await github.getCommits(owner, repo, {\n        sha: targetBranch,\n        per_page: commitCount,\n      });\n\n      if (commits.length === 0) {\n        return NextResponse.json(\n          { error: \"No commits found in the specified branch\" },\n          { status: 404 }\n        );\n      }\n\n      // Get detailed information for each commit (including file changes)\n      const detailedCommits = await Promise.all(\n        commits.map(async (commit) => {\n          try {\n            return await github.getCommit(owner, repo, commit.sha);\n          } catch (error) {\n            // If we can't get detailed info, return the basic commit\n            console.warn(`Failed to get detailed info for commit ${commit.sha}:`, error);\n            return commit;\n          }\n        })\n      );\n\n      // Analyze commits with AI\n      const commitAnalyses = await Promise.all(\n        detailedCommits.map(async (commit) => {\n          const aiSummary = await summarizer.analyzeCommit(commit);\n          \n          return {\n            sha: commit.sha,\n            message: commit.commit.message,\n            author: {\n              name: commit.commit.author.name,\n              email: commit.commit.author.email,\n              username: commit.author?.login,\n            },\n            date: commit.commit.author.date,\n            stats: commit.stats || { additions: 0, deletions: 0, total: 0 },\n            files_changed: (commit.files || []).map(file => ({\n              filename: file.filename,\n              status: file.status,\n              additions: file.additions,\n              deletions: file.deletions,\n            })),\n            ai_summary: aiSummary,\n            html_url: commit.html_url,\n          };\n        })\n      );\n\n      // Generate overall summary\n      const summary = await summarizer.generateCommitSummary(detailedCommits);\n\n      return NextResponse.json({\n        repository: {\n          full_name: repository.full_name,\n          html_url: repository.html_url,\n          default_branch: repository.default_branch,\n        },\n        commits: commitAnalyses,\n        summary,\n        metadata: {\n          total_commits_analyzed: commitAnalyses.length,\n          analysis_date: new Date().toISOString(),\n          branch_analyzed: targetBranch,\n        },\n      });\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      \n      if (errorMessage.includes('404')) {\n        return NextResponse.json(\n          { error: \"Repository not found or branch does not exist\" },\n          { status: 404 }\n        );\n      } else if (errorMessage.includes('403')) {\n        return NextResponse.json(\n          { error: \"Access denied. Repository may be private or rate limit exceeded\" },\n          { status: 403 }\n        );\n      } else if (errorMessage.includes('422')) {\n        return NextResponse.json(\n          { error: \"Invalid branch name or repository parameters\" },\n          { status: 422 }\n        );\n      } else {\n        console.error('Commit analysis error:', error);\n        return NextResponse.json(\n          { error: `Analysis failed: ${errorMessage}` },\n          { status: 500 }\n        );\n      }\n    }\n  } catch (error) {\n    console.error('Request processing error:', error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}